/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
        ext.when            = Conditional clause
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: '.*CHECK_INPUT:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

//
// Read QC options
//

process {
    withName: 'FASTQC' {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/reports/fastqc/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// Genome preparation options
//

process {
    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:BWAMEM2_INDEX' {
        ext.when = {!params.bwamem2_index && params.aligner == "bwamem2"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]
    }

    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:SENTIEON_BWAINDEX' {
        ext.when = {!params.sentieonbwa_index && params.aligner == "sentieon"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }

    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:GET_CHROM_SIZES' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:UNTAR_VCFANNO' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:CHECK_INPUT_VCF' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:SPLIT_MULTIALLELICS_PV' {
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:REMOVE_DUPLICATES_PV' {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:TABIX_PV' {
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:TABIX_.*' {
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:GATK_BILT' {
        ext.prefix = { "${meta.id}_target" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:GATK_ILT' {
        ext.args = '--PADDING 100 -SUBDIVISION_MODE INTERVAL_SUBDIVISION --SCATTER_COUNT 2'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:CAT_CAT_BAIT' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Bwamem2 alignment options
//

process {
    withName: '.*ALIGN_BWAMEM2:.*' {
        ext.when = params.aligner.equals("bwamem2")
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: 'copy',
            pattern: "*{stats,sorted_md.bam,sorted_md.bam.bai}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:BWAMEM2_MEM' {
        ext.args = '-M -K 100000000'
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            enabled: false,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:SAMTOOLS_STATS' {
        ext.args = '-s --remove-overlaps'
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:MARKDUPLICATES' {
        ext.prefix = { "${meta.id}_sorted_md" }
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// Sentieon alignment options
//

process{
    withName: '.*ALIGN_SENTIEON:.*' {
        ext.when = params.aligner.equals("sentieon")
        publishDir = [
            path: { "${params.outdir}/sentieon" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_BWAMEM' {
        ext.args = { "-M -K 10000000 -R ${meta.read_group} " }
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/sentieon_align" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_DATAMETRICS' {
        ext.args = { [
            "--algo GCBias --summary ${meta.id}.gc_summary.txt ${meta.id}.gc_metrics.txt",
            "--algo MeanQualityByCycle ${meta.id}.mq_metrics.txt",
            "--algo QualDistribution ${meta.id}.qd_metrics.txt",
            "--algo InsertSizeMetricAlgo ${meta.id}.is_metrics.txt",
            "--algo AlignmentStat ${meta.id}.aln_metrics.txt",
            "--algo LocusCollector --fun score_info ${meta.id}.score.txt.gz"
            ].join(' ')
        }
        publishDir = [
            path: { "${params.outdir}/sentieon_bam_metrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_LOCUSCOLLECTOR' {
        ext.args = { "--algo LocusCollector --fun score_info ${meta.id}.score.txt.gz" }
        publishDir = [
            path: { "${params.outdir}/sentieon_dedup" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_DEDUP' {
        ext.args = { [
            "--algo Dedup --score_info ${meta.id}.score.txt.gz",
            "--metrics ${meta.id}.dedup_metrics.txt ${meta.id}.dedup.bam"
            ].join(' ')
        }
        publishDir = [
            path: { "${params.outdir}/sentieon_dedup" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_BQSR' {
        ext.args = { "--algo QualCal ${meta.id}.recal_data.table" }
        publishDir = [
            path: { "${params.outdir}/sentieon_recal" },
            mode: params.publish_dir_mode,
        ]
    }

}

//
// Bam QC options
//

process {
    withName: '.*QC_BAM:PICARD_COLLECTMULTIPLEMETRICS' {
        publishDir = [
            path: { "${params.outdir}/bamqc_collectmultiplemetrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:QUALIMAP_BAMQC' {
        publishDir = [
            path: { "${params.outdir}/bamqc_qualimap" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*QC_BAM:TIDDIT_COV' {
        ext.args = '-z 500 -w -u'
        publishDir = [
            path: { "${params.outdir}/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:UCSC_WIGTOBIGWIG' {
        ext.args = '-clip'
        publishDir = [
            path: { "${params.outdir}/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:MOSDEPTH' {
        ext.args = '--d4'
        publishDir = [
            path: { "${params.outdir}/mosdepth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// Repeat expansion calling options
//

process {
    withName: '.*CALL_REPEAT_EXPANSIONS:EXPANSIONHUNTER' {
        publishDir = [
            path: { "${params.outdir}/expansionhunter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// SNV calling options
//

process {
    withName: '.*CALL_SNV_DEEPVARIANT:DEEPVARIANT' {
        ext.args = { "--model_type=${params.analysis_type.toUpperCase()}" }
        ext.prefix = { "${meta.id}_deepvar" }
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:GLNEXUS' {
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:SPLIT_MULTIALLELICS_GL' {
        ext.args = '--output-type z --multiallelics -both'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:REMOVE_DUPLICATES_GL' {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:TABIX_GL' {
        publishDir = [
            path: { "${params.outdir}/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Structural variant calling options
//

process {
    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_MANTA:MANTA' {
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:TIDDIT_SV' {
        ext.args = '-p 6'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:SVDB_MERGE_TIDDIT' {
        ext.args = '--notag --pass_only'
        ext.prefix = 'tiddit'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:SVDB_MERGE' {
        ext.args = '--pass_only'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }
}

//
// Structural variant annotation options
//

process {
    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:SVDB_QUERY' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:PICARD_SORTVCF' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:ENSEMBLVEP_SV' {
        ext.args   = [
            '--plugin LoFtool,vep_cache/LoFtool_scores.txt',
            '--distance 5000',
            '--buffer_size 20000',
            '--format vcf --max_sv_size 248956422',
            '--appris --biotype --canonical --ccds',
            '--domains --exclude_predicted --force_overwrite',
            '--humdiv --no_progress --no_stats --numbers',
            '--polyphen p --protein --offline --regulatory --sift p --symbol --tsl',
            '--uniprot'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/sv_annotate" },
            mode: params.publish_dir_mode,
        ]
    }
}

//
// SNV annotation options
//

process {
    withName: '.*ANNOTATE_VCFANNO:VCFANNO' {
        publishDir = [
            path: { "${params.outdir}/variant_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
