/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
        ext.when            = Conditional clause
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // Local Subworkflows
    // INPUT_CHECK
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // PREPARE_GENOME
    withName: BWAMEM2_INDEX {
        ext.when = {!params.bwamem2_index && params.aligner == "bwamem2"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]
    }
    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }
    withName: GET_CHROM_SIZES {
        publishDir = [
            enabled: false,
        ]
    }
    withName: UNTAR_VCFANNO {
        publishDir = [
            enabled: false,
        ]
    }
    // PREPARE_VCF && PREPARE_BED
    withName: CHECK_INPUT_VCF {
        publishDir = [
            enabled: false,
        ]
    }
    withName: SPLIT_MULTIALLELICS_PV {
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        publishDir = [
            enabled: false
        ]
    }
    withName: REMOVE_DUPLICATES_PV {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: TABIX_PV {
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'TABIX_PT|TABIX_PBT' {
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GATK_BILT' {
        ext.prefix = { "${meta.id}_target" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GATK_ILT' {
        ext.args = '--PADDING 100 -SUBDIVISION_MODE INTERVAL_SUBDIVISION --SCATTER_COUNT 2'
        publishDir = [
            enabled: false
        ]
    }
    withName: 'CAT_CAT_BAIT' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // CALL_SNV_DEEPVARIANT
    withName: DEEPVARIANT {
        ext.args = { "--model_type=${params.analysis_type.toUpperCase()}" }
        ext.prefix = { "${meta.id}_deepvar" }
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SPLIT_MULTIALLELICS_GL {
        ext.args = '--output-type z --multiallelics -both'
        publishDir = [
            enabled: false
        ]
    }
    withName: REMOVE_DUPLICATES_GL {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: GLNEXUS {
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            enabled: false
        ]
    }
    withName: TABIX_GL {
        publishDir = [
            path: { "${params.outdir}/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // CALL_REPEAT_EXPANSIONS
    withName: EXPANSIONHUNTER {
        publishDir = [
            path: { "${params.outdir}/expansionhunter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    // CALL_STRUCTURAL_VARIANTS
    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_SV_MANTA:MANTA" {
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:TIDDIT_SV" {
        ext.args = '-p 6'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }
    withName: SVDB_MERGE_TIDDIT {
        ext.args = '--notag --pass_only'
        ext.prefix = 'tiddit'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: SVDB_MERGE {
        ext.args = '--pass_only'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }
    // ANNOTATE_SV
    withName: "SVDB_QUERY*" {
        publishDir = [
            enabled: false,
        ]
    }
    withName: PICARD_SORTVCF {
        publishDir = [
            enabled: false,
        ]
    }
    withname: BCFTOOLS_VIEW {
        if (params.genome == 'GRCh37') {
            ext.args = '--output-type v --apply-filters PASS --exclude "INFO/clinical_genomics_mipAF > 0.40 | INFO/swegenAF > 0.40 | INFO/clingen_ngiAF > 0.40 | INFO/gnomad_svAF > 0.40 "'
        } else if (params.genome == 'GRCh38') {
            ext.args = '--output-type v --apply-filters PASS --exclude "INFO/swegenAF > 0.40"'
        }
        publishDir = [
            enabled: false,
        ]
    }
    withName: ENSEMBLVEP_SV {
        ext.args   = [
            '--plugin LoFtool,vep_cache/LoFtool_scores.txt',
            '--distance 5000',
            '--buffer_size 20000',
            '--format vcf --max_sv_size 248956422',
            '--appris --biotype --canonical --ccds',
            '--domains --exclude_predicted --force_overwrite',
            '--humdiv --no_progress --no_stats --numbers',
            '--polyphen p --protein --offline --regulatory --sift p --symbol --tsl',
            '--uniprot'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/sv_annotate" },
            mode: params.publish_dir_mode,
        ]
    }
    // NF-CORE Subworkflows
    // ALIGN_BWAMEM2
    withName: ".*ALIGN_BWAMEM2:.*"{
        ext.when = params.aligner.equals("bwamem2")
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: 'copy',
            pattern: "*{stats,sorted_md.bam,sorted_md.bam.bai}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: BWAMEM2_MEM {
        ext.args = '-M -K 100000000'
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            enabled: false,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: SAMTOOLS_STATS {
        ext.args = '-s --remove-overlaps'
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: '.*MARKDUPLICATES' {
        ext.prefix = { "${meta.id}_sorted_md" }
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    // ANNOTATE_VCFANNO
    withName: "VCFANNO" {
        publishDir = [
            path: { "${params.outdir}/variant_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    // QC_BAM
    withName: '.*COLLECTMULTIPLEMETRICS' {
        publishDir = [
            path: { "${params.outdir}/bamqc_collectmultiplemetrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: QUALIMAP_BAMQC {
        publishDir = [
            path: { "${params.outdir}/bamqc_qualimap" },
            mode: 'copy'
        ]
    }
    withName: TIDDIT_COV {
        ext.args = '-z 500 -w -u'
        publishDir = [
            path: { "${params.outdir}/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: ".*QC_BAM:UCSC_WIGTOBIGWIG" {
        ext.args = '-clip'
        publishDir = [
            path: { "${params.outdir}/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: MOSDEPTH {
        ext.args = '--d4'
        publishDir = [
            path: { "${params.outdir}/mosdepth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    // nf-core modules
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/reports/fastqc/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
