/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
    // Local Subworkflows
    // INPUT_CHECK
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // PREPARE_GENOME
    withName: BWAMEM2_INDEX {
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]
    }
    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }
    // CALL_SNV_DEEPVARIANT
    withName: DEEPVARIANT {
        ext.args = "--model_type=${params.analysis_type}"
        ext.suffix = '_deepvar'
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SPLIT_MULTIALLELICS {
        ext.args = '--output-type z --multiallelics -both'
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: REMOVE_DUPLICATES {
        ext.args = '--output-type z --rm-dup none'
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: GLNEXUS {
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            enabled: false
        ]
    }
    withName: TABIX {
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            enabled: false
        ]
    }
    // CALL_REPEAT_EXPANSIONS
    withName: EXPANSIONHUNTER {
        publishDir = [
            path: { "${params.outdir}/expansionhunter" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // NF-CORE Subworkflows
    // ALIGN_BWAMEM2
    withName: BWAMEM2_MEM {
        ext.args = '-M -K 100000000'
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/samtools" },
            enabled: false
        ]
    }
    withName: SAMTOOLS_INDEX_MD {
        publishDir = [
            path: { "${params.outdir}/markduplicates" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_SORT {
        ext.suffix = '_sorted'
        publishDir = [
            path: { "${params.outdir}/samtools" },
            enabled: false
        ]
    }
    withName: SAMTOOLS_STATS {
        ext.args = '-s --remove-overlaps'
        publishDir = [
            path: { "${params.outdir}/samtools/stats" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: SAMTOOLS_MERGE {
        publishDir = [
            path: { "${params.outdir}/samtools" },
            enabled: false
        ]
    }
    withName: '*MARKDUPLICATES' {
        ext.args = '--CREATE_INDEX'
        ext.suffix = '_sorted'
        publishDir = [
            path: { "${params.outdir}/markduplicates" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // QC_BAM
    withName: '*COLLECTMULTIPLEMETRICS' {
        publish_dir = [
            path: { "${params.outdir}/bamqc_collectmultiplemetrics" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'QUALIMAP_BAMQC' {
        publish_dir = [
            path: { "${params.outdir}/bamqc_qualimap" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // nf-core modules
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/reports/fastqc/${meta.id}" }
        ]
    }
}
